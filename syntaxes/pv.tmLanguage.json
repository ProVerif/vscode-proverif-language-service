{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "pv",
  "scopeName": "source.pv",
  "fileTypes": [
    "pv",
    "pvl"
  ],
  "patterns": [
    { "include": "#comments" },
    {
      "//comment": "Declaration of type",
      "begin": "(\\b(type)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments"},
        { "include": "#options"},
        { "include": "#type_ident" }
      ]
    },
    {
      "//comment" : "Declaration of functions",
      "begin" : "(\\b(fun)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments"},
        {
          "begin" : ":",
          "end"   : "(?=\\.)",
          "patterns" : [
            { "include": "#comments"},
            { "include": "#reduc"},
            { "include": "#options" },
            { "include": "#type_ident" }
          ]
        },
        { "include": "#parenthesis_typeseq" },
        { "include": "#options" },
        { "include": "#fun_ident" }
      ]
    },
    {
      "//comment": "Declaration of reduc and equations",
      "begin" : "(\\b(reduc|equation)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.proverif"
        }
      },
      "patterns": [ 
        { "include": "#comments"},
        { "include": "#options" },
        { "include": "#forallvartype" },
        { "include": "#extended_equation" }
      ]
    },
    {
      "//comment" : "Declaration of const, free",
      "begin" : "(\\b(const|free)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { 
          "begin": ":",
          "end": "(?=\\.)",
          "patterns": [
            { "include": "#comments"},
            { "include": "#options" },
            { "include": "#type_ident" }
          ]
        },
        { "include": "#options" },
        { "include": "#variable_ident" }
      ]
    },
    {
      "//comment" : "Declaration of events, predicate",
      "begin" : "(\\b(event|pred)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments"},
        { "include": "#parenthesis_typeseq" },
        { "include": "#fun_ident" },
        { "include": "#options" }
      ]
    },
    {
      "//comment" : "Declaration of tables",
      "begin" : "(\\b(table)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments"},
        { "include": "#parenthesis_typeseq" },
        { "include": "#fun_ident" }
      ]
    },
    {
      "//comment" : "Declaration of let",
      "begin": "(\\b(let)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments" },
        {
          "begin": "=",
          "end": "(?=\\.)",
          "patterns": [
            { "include": "#tprocess" }
          ]
        },
        { "include": "#parenthesis_nevartypeorfail" },
        { "include": "#fun_ident" }
      ]
    },
    {
      "//comment" : "Declaration of letfun",
      "begin": "(\\b(letfun)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments" },
        {
          "begin": "=",
          "end": "(?=\\.)",
          "patterns": [
            { "include": "#pterm" }
          ]
        },
        { "include": "#parenthesis_nevartypeorfail" },
        { "include": "#fun_ident" }
      ]
    },
    {
      "//comment": "Declaration of set parameters",
      "begin" : "(\\b(set)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { 
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments" },
        {
          "begin": "=",
          "end": "(?=\\.)",
          "patterns": [
            { "include": "#settings" }
          ]
        },
        { "include": "#storage_ident"}
      ]
    },
    {
      "//comment": "Declaration of nounif and select",
      "begin": "(\\b(nounif|noselect|select)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#nevartype" },
        { "include": "#tfnebindingseq" },
        { "include": "#slash_value" },
        { "include": "#options" }
      ]
    },
    {
      "//comment": "Declaration of query",
      "begin": "(\\b(query)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#nevartype" },
        { "include": "#tquery" },
        { "include": "#options" }
      ]
    },
    {
      "//comment": "Declaration of noninterf",
      "begin": "(\\b(noninterf)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#nevartype" },
        { "include": "#niseq" },
        { "include": "#options" }
      ]
    },
    {
      "//comment" : "Declaration of weaksecret",
      "begin": "(\\b(weaksecret)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments" },
        { "include": "#variable_ident" }
      ]
    },
    {
      "//comment": "Declaration of not",
      "begin": "(\\b(not)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#nevartype" },
        { "include": "#gterm" },
        { "include": "#options" }
      ]
    },
    {
      "//comment": "Declaration of cryptoverif lines",
      "begin" : "(\\b(param|proba|proof|letproba|implementation)\\b)",
      "end": "\\.",
      "patterns": [
        { "include": "#comments"},
        { "include": "source.cv"}
      ]
    },
    {
      "//comment": "Declaration of elimtrue",
      "begin": "(\\b(elimtrue)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#nevartypeorfail" },
        { "include": "#term" },
        { "include": "#options" }
      ]
    },
    {
      "//comment" : "Declaration of channels",
      "begin" : "(channel)\\s+",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#variable_ident" }
      ]
    },
    {
      "//comment": "Declaration of clauses",
      "begin" : "(\\b(clauses)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments"},
        { "include": "#forallmayfailvartype" },
        { "include": "#term"}
      ]
    },



    {
      "//comment": "Declaration of lemma",
      "begin": "(\\b(axiom|lemma|restriction)\\b)",
      "end": "(?=\\.)",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#nevartype" },
        { "include": "#keywords_query" },
        { "include": "#slash_value" },
        { "include": "#options" }
      ]
    },
    {
      "//comment": "Declaration of expand",
      "begin" : "(expand)\\s+",
      "end": "\\.",
      "beginCaptures": { 
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments"},
        { "include": "#parenthesis_funseq" },
        { "include": "#fun_ident" }
      ]
    },
    {
      "//comment": "Declaration of the main process",
      "begin": "(process|equivalence)(?=(\\s|\\n))",
      "end": "#",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#one_var_decl" },
        { "include": "#new_decl" },
        { "include": "#letinsimple" },
        { "include": "#diff_terms" },
        { "include": "#keywords" },
        { "include": "#boolean" },
        { "include": "#nat" },
        { "include": "#options" }
      ]
    },
    {
      "//comment" : "Declaration of def",
      "begin": "(def)\\s+([a-zA-Z'0-9_]+)",
      "end": "(?={)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" },
        "2": { "name": "entity.name.function.proverif" }
      },
      "patterns":[
        { "include": "#comments" },
        { "include": "#nevartype" }
      ]
    }
  ],
  "repository": {
    "type_ident": {
      "match" : "([a-zA-Z'0-9_]+)",
      "name": "entity.name.type.proverif"
    },
    "fun_ident": {
      "match" : "([a-zA-Z'0-9_]+)",
      "name": "entity.name.function.proverif"
    },
    "variable_ident": {
      "match" : "([a-zA-Z'0-9_]+)",
      "name": "variable.other.proverif"
    },
    "storage_ident": {
      "match" : "([a-zA-Z'0-9_]+)",
      "name": "storage.modifier.proverif"
    },
    "parenthesis_funseq": {
      "begin" : "\\(",
      "end"   : "\\)",
      "patterns" : [
        { "include": "#comments"},
        { "include": "#fun_ident" }
      ]
    },
    "parenthesis_typeseq": {
      "begin" : "\\(",
      "end"   : "\\)",
      "patterns" : [
        { "include": "#comments"},
        { "include": "#type_ident" }
      ]
    },
    "parenthesis_nevartypeorfail": {
      "begin" : "\\(",
      "end"   : "\\)",
      "patterns" : [
        { "include": "#comments"},
        { "include": "#nevartypeorfail" }
      ]
    },
    "comments": {
      "name": "comment.multiline",
      "begin": "\\(\\*",
      "end": "\\*\\)",
      "patterns": [
        { "include": "#comments" }
      ]
    },
    "options": {
      "begin": "\\[",
      "end": "\\]",
      "name": "meta.options_declaration.proverif",
      "patterns": [
        { "include": "#comments"},
        {
          "match": "[a-zA-Z'0-9_]+",
          "name": "entity.name.tag.proverif"
        }
      ]
    },
    "vars_options": {
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        { "include": "#comments"},
        {
          "match": "[a-zA-Z'0-9_]+",
          "name": "variable.other.proverif"
        }
      ]
    },
    "slash_value": {
      "match": "\\/\\s*(\\d+)",
      "captures": { "1": { "name": "constant.numeric.proverif" } }
    },
    "extended_equation": {
      "patterns": [
        {
          "match": "(\\b(let|in)\\b)",
          "name": "keyword.control.proverif"
        },
        { "include": "#term" }
      ]
    },
    "settings": {
      "patterns": [
        {
          "match": "(\\b(true|false)\\b)",
          "name": "constant.language.proverif"
        },
        {
          "match": "-",
          "name": "keyword.operator.arithmetic.proverif"
        },
        {
          "match": "(\\b([0-9]+)\\b)",
          "name": "constant.numeric.proverif"
        },
        {
          "match" : "([a-zA-Z'0-9_]+)",
          "name": "support.constant.proverif"
        }
      ]
    },
    "term": {
      "patterns": [
        {
          "match": "(\\b(fail|choice|diff|not)\\b)",
          "name": "keyword.operator.proverif"
        },
        {
          "match": "(\\b(true|false)\\b)",
          "name": "constant.language.proverif"
        },
        {
          "match": "(-|\\+)",
          "name": "keyword.operator.arithmetic.proverif"
        },
        {
          "match": "(=|<>|\\|\\||&&)",
          "name": "keyword.operator.comparison.proverif"
        },
        {
          "match": "(\\b([0-9]+)\\b)",
          "name": "constant.numeric.proverif"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#term" }
          ]
        }
      ]
    },
    "pterm": {
      "patterns": [
        {
          "match": "(\\b(if|then|let|suchthat|event|insert|get)\\b)",
          "name": "keyword.control.proverif"
        },
        {
          "match": "(\\b(choice|diff|not)\\b)",
          "name": "keyword.operator.proverif"
        },
        {
          "match": "(\\b(true|false)\\b)",
          "name": "constant.language.proverif"
        },
        {
          "match": "(-|\\+)",
          "name": "keyword.operator.arithmetic.proverif"
        },
        {
          "match": "(<|>|<=|>=|=|<>|\\|\\||&&)",
          "name": "keyword.operator.comparison.proverif"
        },
        {
          "match": "(\\b([0-9]+)\\b)",
          "name": "constant.numeric.proverif"
        },
        { "include": "#new_decl" },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#pterm" }
          ]
        }
      ]
    },
    "gterm": {
      "patterns": [
        {
          "match": "(\\b(table|phase|event|inj\\-event|table|let|in|new|attacker|mess)\\b)",
          "name": "keyword.control.proverif"
        },
        {
          "match": "(\\b(choice|diff|not)\\b)",
          "name": "keyword.operator.proverif"
        },
        {
          "match": "(\\b(true|false)\\b)",
          "name": "constant.language.proverif"
        },
        {
          "match": "(-|\\+)",
          "name": "keyword.operator.arithmetic.proverif"
        },
        {
          "match": "(<|>|<=|>=|=|<>|\\|\\||&&)",
          "name": "keyword.operator.comparison.proverif"
        },
        {
          "match": "(\\b([0-9]+)\\b)",
          "name": "constant.numeric.proverif"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#gterm" }
          ]
        }
      ]
    },
    "gformat": {
      "patterns": [
        { "include": "#comments" },
        {
          "match": "(\\b(choice|new|let|in)\\b)",
          "name": "keyword.control.proverif"
        },
        {
          "match": "(\\+)",
          "name": "keyword.operator.arithmetic.proverif"
        },
        {
          "match": "!",
          "name": "keyword.control.proverif"
        },
        {
          "match": "(\\b([0-9]+)\\b)",
          "name": "constant.numeric.proverif"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#gformat" }
          ]
        }
      ]
    },
    "forallvartype": {
      "begin": "(\\b(forall)\\b)",
      "end": ";",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments"},
        { "include": "#nevartype" }
      ]
    },
    "forallmayfailvartype": {
      "begin": "(\\b(forall)\\b)",
      "end": ";",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments"},
        { "include": "#nevartypeorfail" }
      ]
    },
    "tprocess": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#new_decl" },
        {
          "match": "(\\b(foreach|yield|if|then|in|out|let|suchthat|insert|get|event|phase|sync)\\b)",
          "name": "keyword.control.proverif"
        },
        {
          "match": "!",
          "name": "keyword.control.proverif"
        },
        { "include": "#pterm" },
        { "include": "#options" }
      ]
    },
    "nevartype": {
      "match": "([\\s,a-zA-Z0-9'_]+):\\s*([a-zA-Z0-9'_]+)",
      "captures":{
        "1": { 
          "patterns": [
            { 
              "match": "[a-zA-Z0-9'_]+",
              "name": "variable.other.proverif"
            }
          ]
        },
        "2": { "name": "entity.name.type.proverif" }
      }
    },
    "nevartypeorfail": {
      "match": "([\\s,a-zA-Z0-9'_]+):\\s*([a-zA-Z0-9'_]+)(\\s+or\\s+fail)?",
      "captures":{
        "1": { 
          "patterns": [
            { 
              "match": "[a-zA-Z0-9'_]+",
              "name": "variable.other.proverif"
            }
          ]
        },
        "2": { "name": "entity.name.type.proverif" },
        "3": { "name": "keyword.control.proverif" }
      }
    },
    "new_decl": {
      "begin": "(\\b(new)\\b)",
      "end": "(?=;)",
      "captures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#comments"},
        {
          "begin": ":",
          "end": "(?=;)",
          "patterns": [
            { "include": "#comments"},
            { "include": "#options" },
            { "include": "#type_ident" }
          ]
        },
        { "include": "#variable_ident" },
        { "include": "#vars_options" }
      ]
    },
    "tfnebindingseq": {
      "patterns": [
        { "include": "#comments" },
        {
          "begin": "(let)",
          "end": "(in)",
          "beginCaptures": {"1": {"name": "keyword.control.proverif" }},
          "endCaptures": {"1": {"name": "keyword.control.proverif" }},
          "patterns": [
            { "include": "#comments"},
            { "include": "#gformat" }
          ]
        },
        {
          "begin": "<-",
          "end": ";",
          "patterns": [
            { "include": "#comments"},
            { "include": "#gformat" }
          ]
        },
        {
          "begin": "(\\b(table|event|mess)\\b)\\s*\\(",
          "end": "\\)(\\s*phase\\s*[0-9]+)?",
          "beginCaptures": {"1": {"name": "keyword.control.proverif" }},
          "endCaptures": {
            "1": {
              "patterns": [
                {
                  "match": "phase",
                  "name": "keyword.control.proverif"
                },
                {
                  "match": "[0-9]+",
                  "name": "constant.numeric.proverif"
                }
              ]
            }
          },
          "patterns": [
            { "include": "#comments"},
            { "include": "#gformat" }
          ]
        }
      ]
    },
    "tquery": {
      "patterns": [
        { "include": "#comments"},
        { "include": "#gterm" },
        {
          "match": "(\\b(public_vars|secret|putbegin|event|inj-event|attacker)\\b)",
          "name": "keyword.control.proverif"
        },
        { "include": "#options"}
      ]
    },
    "niseq":{
      "patterns": [
        { "include": "#comments"},
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#term" }
          ]
        },
        {
          "match": "(\\b(among)\\b)",
          "name": "keyword.control.proverif"
        }
      ]
    },





    "forall_mayfail": {
      "begin": "(forall)",
      "end": "(;)",
      "captures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        {
          "match": "([\\s,a-zA-Z0-9'_]*)(:)\\s*([a-zA-Z'0-9_]+)(\\s+(or)\\s+(fail))?",
          "captures":{
            "1": { 
              "patterns": [
                { 
                  "match": "[a-zA-Z'0-9_]+",
                  "name": "variable.other.proverif"
                }
              ]
            },
            "2": { "name": "keyword.control.proverif" },
            "3": { "name": "entity.name.type.proverif" },
            "4": { "name": "keyword.control.proverif" },
            "5": { "name": "constant.language" }
          }
        }
      ]
    },
    "reduc_rules": {
      "patterns": [
        { "include": "#comments"},
        { "include": "#options" },
        { "include": "#forallvartype" },
        { 
          "match" : "otherwise",
          "name": "keyword.control.proverif"
        }
      ]
    },
    "boolean": {
      "patterns": [
        {
          "match": "(=|==>|\\|\\||<|<=|>=|>|&&)",
          "name": "keyword.operator.comparison"
        },
        {
          "match": "\\b(and|not|or)\\b",
          "captures": {
            "1": {
              "name": "support.function.pervasives.boolean-operatons.proverif"
            }
          }
        },
        {
          "match": "(\\b(true|false)\\b)",
          "name": "constant.language"
        }
      ]
    },
    "nat": {
      "match": "(?<!\\w)([0-9]+)(?!\\w)",
      "captures": {
        "1": {
          "name": "constant.numeric.proverif"
        }
      }
    },
    "reduc": {
      "//comment": "Declaration of reduc",
      "begin" : "(reduc)\\s+",
      "end": "(?=\\.)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.proverif"
        }
      },
      "patterns": [ 
        { "include": "#comments"},
        { "include": "#options" },
        { "include": "#forall_mayfail" },
        { "include": "#letinsimple" },
        { "include": "#boolean"},
        { 
          "match" : "otherwise",
          "name": "keyword.control.proverif"
        }
      ]
    },
    "letinsimple": {
      "begin": "(let)\\s+([a-zA-Z'0-9_]+)\\s+(=)",
      "end": "(\\s|^)(in)(\\s|\\n)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" },
        "2": { "name": "variable.other.proverif" },
        "3": { "name": "support.function.pervasives.boolean-operatons.proverif" }
      },
      "endCaptures": { "2": { "name": "keyword.control.proverif" } },
      "patterns":[
        { "include": "#comments" },
        { "include": "#new_decl" },
        { "include": "#one_var_decl" },
        { "include": "#letinsimple" },
        { "include": "#keywords" },
        { "include": "#boolean" },
        { "include": "#nat" }
      ]    
    },
    "letinsimple_query": {
      "begin": "(let)\\s+([a-zA-Z'0-9_]+)\\s+(=)",
      "end": "(\\s|^)(in)(\\s|\\n)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" },
        "2": { "name": "variable.other.proverif" },
        "3": { "name": "support.function.pervasives.boolean-operatons.proverif" }
      },
      "endCaptures": { "2": { "name": "keyword.control.proverif" } },
      "patterns":[
        { "include": "#comments" },
        { 
          "match": "new",
          "name":  "keyword.control.proverif"
        }
      ]    
    },
    "one_var_decl": {
      "match": "([a-zA-Z0-9'_]*)(:)\\s*([a-zA-Z0-9'_]*)",
      "captures":{
        "1": { "name": "variable.other.proverif" },
        "2": { "name": "keyword.control.proverif" },
        "3": { "name": "entity.name.type.proverif" }
      }
    },
    "keywords": {
      "patterns": [
        {
          "match": "(?<!\\w)(if|then|let|else|in|event|out|get|insert|suchthat|phase|sync)(?!\\w)",
          "captures": {
            "1": { "name": "keyword.control.proverif" }
          }
        },
        {
          "match": "([;!])",
          "captures": {
            "1": { "name": "keyword.control.proverif" }
          }
        }
      ]
    },
    "keywords_query": {
      "patterns": [
        {
          "match": "(?<!\\w)(attacker|mess|table|event|among|public_vars|inj-event|new|secret|putbegin)(?!\\w)",
          "captures": {
            "1": { "name": "keyword.control.proverif" }
          }
        },
        {
          "match": "([;!])",
          "captures": {
            "1": { "name": "keyword.control.proverif" }
          }
        }
      ]
    },
    "diff_terms":{
      "begin": "(choice|diff)\\s*\\[",
      "end": "\\]",
      "beginCaptures": { "1": { "name": "keyword.control.proverif" } },
      "patterns": [
        { "include": "#comments" },
        { "include": "#diff_terms" },
        { "include": "#one_var_decl" },
        { "include": "#nat" }
      ]
    }
  }
}