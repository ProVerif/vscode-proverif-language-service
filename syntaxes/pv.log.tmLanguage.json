{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "pv.log",
  "scopeName": "source.pv.log",
  "fileTypes": [
    "pv.log"
  ],
  "patterns": [
    {
      "//comment": "Prevent coloring ProVerif process statements, as too complex for this grammar",
      "match" : "({[0-9]+})(.+)",
      "captures": {
        "1": { "name": "comment.block.proverif" }
      }
    },
    {
      "//comment": "Declaration of facts or events",
      "begin" : "\\b(attacker2|mess2|table2|b-event2|event2|attacker|mess|table|b-event|event)\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#fact"}
      ]
    },
    {
      "//comment": "Declaration of built-in functions",
      "begin" : "\\b(is_nat|is_not_nat|neq|geq|equal)\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#fact"}
      ]
    },
    {
      "//comment": "Declaration of inline text facts",
      "match" : "([Tt]he (message|entry|function|event)|on channel|resp\\.( (event|message))?|initially knows|creates the new name|tests whether|may know|may obtain|has some term) ([^ ]+)",
      "captures": {
        "5": {"patterns": [{ "include": "#fact"}] }
      }
    },
    {
      "//comment" : "Equalities",
      "match": "(@?[\\(\\)\\(\\],a-zA-Z'0-9_]+) (=|≠) (@?[\\(\\)\\(\\],a-zA-Z'0-9_]+)\\b",
      "captures": {
        "1": { 
          "patterns": [
            { "include": "#fact"}
          ]
        },
        "3": { 
          "patterns": [
            { "include": "#fact"}
          ]
        }
      }
    },
    {
      "//comment": "Declaration of forall",
      "begin" : "\\((forall)",
      "end": "\\)",
      "beginCaptures": {
        "1": { "name": "keyword.control.proverif" }
      },
      "patterns": [
        { "include": "#fact"}
      ]
    },
    {
      "//comment": "Declaration of inequalities",
      "begin" : "(@[a-zA-Z'0-9_]+) ≠",
      "end": "&&",
      "beginCaptures": {
        "1": { "name": "variable.parameter.proverif" }
      },
      "patterns": [
        { "include": "#fact"}
      ]
    },
    { "include": "#highlights" }
  ],
  "repository": {
    "fact": {
      "patterns":[
        {
          "//comment" : "Functions",
          "begin" : "\\b([a-zA-Z'0-9_]+)\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "entity.name.function.proverif" }
          },
          "patterns": [
            { "include": "#fact"}
          ]
        },
        {
          "//comment" : "Pair",
          "begin" : "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#fact"}
          ]
        },
        {
          "//comment" : "Context",
          "begin" : "\\[",
          "end": "\\]",
          "patterns": [
            { "include": "#fact"}
          ]
        },
        {
          "//comment" : "Parameters",
          "match": "@[a-zA-Z'0-9_]+",
          "name": "variable.parameter.proverif"
        },
        {
          "//comment" : "Numbers",
          "match": "[0-9]+",
          "name": "constant.numeric.proverif"
        },
        {
          "//comment" : "Constants",
          "match": "[a-zA-Z'0-9_]+",
          "name": "variable.other.constant.proverif"
        }
      ]
    },
    "highlights": {
      "patterns": [
        {
          "match": "(\\b(true|false)\\b)",
          "name": "constant.language.proverif"
        },
        {
          "match" : "{[0-9]+}",
          "name": "comment.block.proverif"
        },
        {
          "match": "(\\b([0-9]+)\\b)",
          "name": "constant.numeric.proverif"
        }
      ]
    }
  }
}