with (open('pitparser.mly', 'r') as reader):
    content = reader.read()

    body = content[content.find("%%") + 2:]  # cut off header
    lines = body.splitlines()

    rules = {}
    ruleName = None
    ruleContent = []
    inStarComment = False
    inBracketComment = False
    for index, line in enumerate(lines):
        normalizedLine: str = line.strip()
        if inStarComment or normalizedLine.startswith("/*"):
            inStarComment = True
            if normalizedLine.endswith("*/"):
                inStarComment = False
            continue
        if inBracketComment or normalizedLine.startswith("{"):
            inBracketComment = True
            if normalizedLine.endswith("}"):
                inBracketComment = False
            continue

        if normalizedLine.endswith(":"):
            if ruleName:
                # remove control symbols & comments
                cleanedRuleContent = []
                for content in ruleContent:
                    normalizedContent = content.strip("|").strip()
                    if normalizedContent.find("/*") > 0 and normalizedContent.find("*/") == -1:
                        normalizedContent = normalizedContent[0: normalizedContent.rfind("/*")]
                    if len(content) == 0:
                        continue
                    cleanedRuleContent.append(normalizedContent)
                rules[ruleName] = cleanedRuleContent
            ruleStarts = True
            ruleName = normalizedLine
            ruleContent = []
        elif ruleName and len(ruleContent) == 0 and not normalizedLine.startswith("/*") and not normalizedLine.startswith("//"):
            ruleContent.append(normalizedLine)
        elif ruleName and normalizedLine.startswith('|'):
            ruleContent.append(normalizedLine)
        else:
            print("Ignoring line " + str(index+1) + ": " + normalizedLine)

    resultLines = [
        '// generated by pitparser-transpile-g4.py',
        '// DANGER: THIS GRAMMAR IS NOT 100% ACCURATELY TRANSPILED. But sufficiently to make this language server work.',
        'parser grammar ProverifParser;',
        'options { tokenVocab = ProverifLexer; }',
        ''
    ]
    for rule in rules.keys():
        resultLines.append(rule.strip(":"))
        for index, entry in enumerate(rules[rule]):
            normalizedEntry = entry.strip("|").strip()
            if normalizedEntry == "":
                continue
            if index == 0:
                resultLines.append("    : " + normalizedEntry)
            else:
                resultLines.append("    | " + normalizedEntry)

        resultLines.append("    ;")
        resultLines.append("")

        with open('ProverifParser.g4', 'w') as writer:
            writer.writelines(line + '\n' for line in resultLines)
